#include <iostream>
#include <cmath>
#include "mkl.h"
#include "mkl_omp_offload.h"
using namespace std;

{%- for t in l_unique_type %}
bool almost_equal({{t}} x, {{t}} gold, {{t}} rel_tol, {{t}} abs_tol) {
  // Based on this Python implementation
  https://docs.python.org/3/library/math.html#math.isclose

  bool close_enough = false;
  {%- if t == "MKL_Complex8" or t == "MKL_Complex16" %}
  close_enough = ((abs(gold.real-x.real) <= max(rel_tol.real * max(abs(gold.real), abs(x.real)), abs_tol.real)) &&
                  (abs(gold.imag-x.imag) <= max(rel_tol.imag * max(abs(gold.imag), abs(x.imag)), abs_tol.imag)));
  {%- else %}
  close_enough = (abs(gold-x) <= max(rel_tol * max(abs(gold), abs(x)), abs_tol));
  {%- endif %}

  return close_enough;
}
{%- endfor %}

int main( int argc, char* argv[] )
{

// assign values to the scalar inputs
{%- for size,t,name in l_scalar_input %}
  {%- if t == "MKL_Complex8" or t == "MKL_Complex16" %}
  {{t}} {{name}};
  {{name}}.real = {{size}};
  {{name}}.imag = {{size}};
  {%- else %}
  {{t}} {{name}} = {{size}};
  {%- endif %}
{%- endfor %}

// allocate space for the arrays
{%- for size,pointer, intent,t,name in l_types_names if pointer %}
  {%- if intent == "out" or intent == "inout" %}
  {{t}} *{{name}}_cpu = ({{t}} *)mkl_malloc( {{size}}*sizeof({{t}}), 64);
  {{t}} *{{name}}_gpu = ({{t}} *)mkl_malloc( {{size}}*sizeof({{t}}), 64);
  for(int i=0;i<{{size}};i++)	{
        {%- if t == "MKL_Complex8" or t == "MKL_Complex16" %}
        {{name}}_gpu[i].real = 1.0/(i+0.1);
        {{name}}_gpu[i].imag = 1.0/(i+0.1);
        {{name}}_cpu[i].real = 1.0/(i+0.1);
        {{name}}_cpu[i].imag = 1.0/(i+0.1);
        {%- else %}
        {{name}}_gpu[i] = 1.0/(i+0.1);
        {{name}}_cpu[i] = 1.0/(i+0.1);
        {%- endif %}
   }
   {%- else %}
   {{t}} *{{name}} = ({{t}} *)mkl_malloc( {{size}}*sizeof({{t}}), 64);
   {%- endif %}
{%- endfor %}

{%- if l_return %}
  {{l_return[0][1]}} {{l_return[0][2]}}_cpu = 0;
  {{l_return[0][1]}} {{l_return[0][2]}}_gpu = 0;
{%- endif %}

// assign values to allocatable inputs
{%- for size,pointer, intent,t,name in l_types_names if pointer  %}
      {%- if intent == "in"  %}
        for(int i=0;i<{{size}};i++)
    {
   {%- if t == "MKL_Complex8" or t == "MKL_Complex16" %}
      {{name}}[i].real = 1.0/(i+0.1);
      {{name}}[i].imag = 1.0/(i+0.1);
   {%- else %}
      {{name}}[i] = 1.0/(i+0.1);
   {%- endif %}
    }
       {%- endif %}

{%- endfor %}

// call CPU version
{%- if l_return %}
{{l_return[0][2]}}_cpu = \
{%- endif %}
   {{name_function}} (
{%- for size,pointer,intent,t,name in l_types_names %}
    {%- if loop.last %}
       {%- if intent == "out" or intent == "inout" %}
          {{name}}_cpu
       {%- else %}
          {{name}}
       {%- endif %}
    {%- else %}
       {%- if intent == "out" or intent == "inout" %}
          {{name}}_cpu,
       {%- else %}
           {%- if not pointer and (t == "MKL_Complex8" or t == "MKL_Complex16") %}
           &{{name}},
           {%- else %}
           {{name}},
           {%- endif %}
       {%- endif %}
    {%- endif %}
{%- endfor %}
          );

// call GPU version
#pragma omp target data \
{%- for size,t,name in l_aggregate_input %}
   {%- if loop.first %}
   map(to: {{name}}[0:{{size}}]\
   {%- elif loop.last %}
   , {{name}}[0:{{size}}] \
   {%- else %}
   , {{name}}[0:{{size}}]\
   {%- endif %}
{%- endfor %}
{%- if l_aggregate_input %}
    {%- if l_input_output %}
    ) \
    {%- else %}
    )
    {%- endif %}
{%- endif %}

{%- for size,t,name in l_input_output %}
   {%- if loop.first %}
   map(tofrom: {{name}}_gpu[0:{{size}}]\
   {%- elif loop.last %}
   , {{name}}_gpu[0:{{size}}] \
   {%- else %}
   , {{name}}_gpu[0:{{size}}]\
   {%- endif %}
{%- endfor %}
{%- if l_input_output %}
    )
{%- endif %}

    {
      #pragma omp target variant dispatch use_device_ptr( \
{%- for size,t,name in l_aggregate_input %}
   {%- if loop.last %}
   {{name}} \
   {%- else %}
   {{name}}, \
   {%- endif %}
{%- endfor %}
{%- if l_aggregate_input %}
    {%- if l_input_output %}
    , \
    {%- else %}
    )
    {%- endif %}
{%- endif %}

{%- for size,t,name in l_input_output %}
   {%- if loop.first %}
   {{name}}_gpu \
   {%- elif loop.last %}
   , {{name}}_gpu \
   {%- else %}
   , {{name}}_gpu \
   {%- endif %}
{%- endfor %}
{%- if l_input_output %}
    )
{%- endif %}


{%- if l_return %}
{{l_return[0][2]}}_gpu = \
{%- endif %}
   {{name_function}} (
{%- for size,pointer,intent,t,name in l_types_names %}
    {%- if loop.last %}
       {%- if intent == "out" or intent == "inout" %}
          {{name}}_gpu
       {%- else %}
          {{name}}
       {%- endif %}
    {%- else %}
       {%- if intent == "out" or intent == "inout" %}
          {{name}}_gpu,
       {%- else %}
       	   {%- if not pointer and (t == "MKL_Complex8" or t == "MKL_Complex16") %}
           &{{name}},
           {%- else %}
           {{name}},
	   {%- endif %}
       {%- endif %}
    {%- endif %}
{%- endfor %}
          );
}


{%- if l_return %}

  if (!almost_equal({{l_return[0][2]}}_gpu, {{l_return[0][2]}}_cpu, 0.01, 0.01)) {
    cerr << "Expected: " << {{l_return[0][2]}}_cpu << " Got: " << {{l_return[0][2]}}_gpu << endl;
    exit(112);
  }

{%- endif %}

// check answer
{%- for size,pointer,intent,t,name in l_types_names %}

       {%- if intent == "out" or intent == "inout" %}

       // tolerance
       {{t}} {{name}}_tol;

       {%- if t == "MKL_Complex8" or t == "MKL_Complex16" %}
       {{name}}_tol.real = 0.01;
       {{name}}_tol.imag = 0.01;
       {%- else %}
       {{name}}_tol = 0.01;
       {%- endif %}

         {%- if pointer %}
	   for(int i=0;i<{{size}};i++) {
             if (not(almost_equal({{name}}_gpu[i], {{name}}_cpu[i], {{name}}_tol, {{name}}_tol))) {
	     cerr << "i: " << i << endl;
	     {%- if t == "MKL_Complex8" or t == "MKL_Complex16" %}
	     cerr << "Expected: " << {{name}}_cpu[i].imag << " Got: " << {{name}}_gpu[i].imag << endl;
	     cerr << "Expected: " << {{name}}_cpu[i].real << " Got: " << {{name}}_gpu[i].real << endl;
	     {%- else %}
      	     std::cerr << "Expected: " << {{name}}_cpu[i] << " Got: " << {{name}}_gpu[i] << std::endl;
	     {%- endif %}
	     std::exit(112);
             }       
           }
        {%- else %}
             if (not(almost_equal({{name}}_gpu, {{name}}_cpu, {{name}}_tol, {{name}}_tol))) {
             {%- if t == "MKL_Complex8" or t == "MKL_Complex16" %}
             cerr << "Expected: " << {{name}}_cpu.imag << " Got: " << {{name}}_gpu.imag << endl;
             cerr << "Expected: " << {{name}}_cpu.real << " Got: " << {{name}}_gpu.real << endl;
             {%- else %}
             cerr << "Expected: " << {{name}}_cpu << " Got: " << {{name}}_gpu << endl;
	     {%- endif %}
             exit(112);
             }       
        {%- endif %}

        {%- endif %}
{%- endfor %}

// free space for the arrays
{%- for size,pointer, intent,t,name in l_types_names if pointer %}
  {%- if intent == "out" or intent == "inout" %}
  mkl_free({{name}}_cpu);
  mkl_free({{name}}_gpu);
  {%- else %}
  mkl_free({{name}});
  {%- endif %}
{%- endfor %}

  return 0;
}
